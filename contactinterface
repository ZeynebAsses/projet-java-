import javax.swing.*;
import java.awt.*;
import java.util.List;

/**
 * Interface graphique pour gérer les contacts
 */
public class ContactInterface extends JFrame {
    private List<Contact> contacts;
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private JList<String> contactsList = new JList<>(listModel);
    private BDcontact contactDAO = new BDcontact();

    public ContactInterface() {
        // Configuration de la fenêtre
        setTitle("Gestionnaire de Contacts");
        setSize(500, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Chargement initial des contacts
        chargerContacts();

        // Configuration de l'interface
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Liste des contacts
        JScrollPane scrollPane = new JScrollPane(contactsList);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        // Panel des boutons
        JPanel buttonPanel = new JPanel(new GridLayout(1, 3, 5, 5));

        JButton addButton = new JButton("Ajouter");
        addButton.addActionListener(e -> ajouterContact());

        JButton deleteButton = new JButton("Supprimer");
        deleteButton.addActionListener(e -> supprimerContact());

        JButton searchButton = new JButton("Rechercher");
        searchButton.addActionListener(e -> rechercher());
        buttonPanel.add(addButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(searchButton);

        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
        add(mainPanel);
    }

    /**
     * Charge les contacts depuis la base de données
     */
    private void chargerContacts() {
        try {
            contacts = contactDAO.getAllContacts();
            actualiserListe();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Erreur de chargement: " + e.getMessage(),
                    "Erreur",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Met à jour l'affichage de la liste
     */
    private void actualiserListe() {
        listModel.clear();
        for (Contact contact : contacts) {
            listModel.addElement(contact.toString());
        }
    }

    /**
     * Ajoute un nouveau contact
     */
    private void ajouterContact() {
        JTextField nomField = new JTextField();
        JTextField prenomField = new JTextField();
        JTextField telField = new JTextField();

        JPanel panel = new JPanel(new GridLayout(3, 2));
        panel.add(new JLabel("Nom:"));
        panel.add(nomField);
        panel.add(new JLabel("Prénom:"));
        panel.add(prenomField);
        panel.add(new JLabel("Téléphone:"));
        panel.add(telField);

        int result = JOptionPane.showConfirmDialog(
                this, panel, "Nouveau Contact",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            String nom = nomField.getText().trim();
            String prenom = prenomField.getText().trim();
            String tel = telField.getText().trim();

            if (!nom.isEmpty() && !prenom.isEmpty() && !tel.isEmpty()) {
                try {
                    Contact nouveau = new Contact(nom, prenom, tel);
                    contactDAO.addContact(nouveau);
                    chargerContacts(); // Recharge la liste
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this,
                            "Erreur: " + e.getMessage(),
                            "Erreur BDD",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    /**
     * Supprime le contact sélectionné
     */
    private void supprimerContact() {
        int selectedIndex = contactsList.getSelectedIndex();
        if (selectedIndex != -1) {
            try {
                Contact aSupprimer = contacts.get(selectedIndex);
                contactDAO.deleteContact(aSupprimer);
                chargerContacts(); // Recharge la liste
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Erreur: " + e.getMessage(),
                        "Erreur BDD",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Veuillez sélectionner un contact",
                    "Aucun contact sélectionné",
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    private void rechercher() {
        String search = JOptionPane.showInputDialog(this, "Rechercher un contact:");
        if (search != null && !search.trim().isEmpty()) {
            listModel.clear();
            for (Contact c : contacts) {
                if (c.toString().toLowerCase().contains(search.toLowerCase())) {
                    listModel.addElement(c.toString());
                }
            }
        } else {
            actualiserListe();
        }
    }
